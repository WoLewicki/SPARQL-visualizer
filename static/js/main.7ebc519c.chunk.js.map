{"version":3,"sources":["utils/wikidata.js","utils/queryParser.js","slider.js","App.js","utils/queries.js","reportWebVitals.js","index.js"],"names":["wdk","WBK","instance","sparqlEndpoint","executeQuery","query","a","sparqlQuery","split","url","body","axios","post","result","data","execute","setGlobeLabels","setCurrentQuery","bindings","results","globeLabels","parseCountriesIntoObjects","console","warn","arr","obj","longitude","cords","value","replace","latitude","push","properties","name","countryLabel","label","itemLabel","placeName","placeLabel","pop_max","population","StyledSlider","styled","ReactSlider","StyledThumb","div","Thumb","props","state","valueNow","StyledTrack","index","Track","typography","Typography","funstonTheme","injectStyles","injectFonts","TEXT_COLLAPSE_OPTIONS","collapse","collapseText","expandText","minHeight","maxHeight","textStyle","color","fontSize","styles","splitScreen","display","flexDirection","alignItems","justifyContnent","leftPane","width","rightPane","App","React","useState","currentQuery","booksCounter","setBooksCounter","billCounter","setBillCounter","className","Helmet","charSet","style","options","onClick","block","min","max","defaultValue","renderTrack","renderThumb","onChange","val","concat","globeImageUrl","backgroundImageUrl","height","labelsData","labelLat","d","labelLng","labelText","labelSize","Math","sqrt","labelDotRadius","labelColor","labelResolution","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7ebc519c.chunk.js","sourcesContent":["import axios from 'axios';\nimport WBK from 'wikibase-sdk';\n\nconst wdk = WBK({\n    instance: 'https://www.wikidata.org',\n    sparqlEndpoint: 'https://query.wikidata.org/sparql',\n});\n\nexport const searchEntities = async (search, language) => {\n    const url = wdk.searchEntities({ search, language });\n    const result = await axios.get(url);\n    return result.data.search;\n};\n\nexport const executeQuery = async (query) => {\n    const [url, body] = wdk.sparqlQuery(query).split('?');\n    const result = await axios.post(url, body);\n    return result.data;\n};\n","import {executeQuery} from './wikidata';\n\nexport async function execute(setGlobeLabels, setCurrentQuery, query) {\n  setCurrentQuery(query);\n  const data = await executeQuery(query);\n  const bindings = data.results.bindings;\n  const globeLabels = parseCountriesIntoObjects(bindings);\n  console.warn(globeLabels);\n  setGlobeLabels(globeLabels);\n}\n\nfunction parseCountriesIntoObjects(bindings) {\n  const arr = [];\n  for (const obj of bindings) {\n    const longitude = obj?.cords?.value?.replace( /[^\\d. -]*/g, '').split(\" \")[0];\n    const latitude = obj?.cords?.value?.replace( /[^\\d. -]*/g, '').split(\" \")[1];\n    arr.push({\n      properties: {\n        longitude,\n        latitude,\n        name: obj?.countryLabel?.value  || obj?.label?.value || `${obj?.itemLabel?.value} - ${obj?.placeName?.value || obj?.placeLabel?.value}`,\n        pop_max: obj?.population?.value || 10000000,\n      }\n    })\n  }\n  return arr;\n}\n","import styled from 'styled-components';\nimport ReactSlider from 'react-slider'\n\nexport const StyledSlider = styled(ReactSlider)`\n    width: 500px;\n    height: 35px;\n`;\n\nconst StyledThumb = styled.div`\n    height: 35px;\n    line-height: 35px;\n    width: 100px;\n    text-align: center;\n    background-color: #000;\n    color: #fff;\n    border-radius: 20%;\n    cursor: grab;\n`;\n\nexport const Thumb = (props, state) => <StyledThumb {...props}>{state.valueNow}</StyledThumb>;\n\nconst StyledTrack = styled.div`\n    top: 0;\n    bottom: 0;\n    background: ${props => props.index === 0 ? '#0f0' : '#ddd'};\n    border-radius: 999px;\n`;\n\nexport const Track = (props, state) => <StyledTrack {...props} index={state.index} />;\n\n\n","import React from 'react';\n\nimport {Helmet} from \"react-helmet\";\nimport Typography from 'typography'\nimport funstonTheme from 'typography-theme-funston'\nimport injectFonts from 'typography-inject-fonts'\nimport Globe from 'react-globe.gl';\nimport ReactTextCollapse from 'react-text-collapse';\n\nimport './App.css';\nimport {countriesQuery, antoineQuery, booksQuery, maxBillQuery, airAccidentsQuery} from './utils/queries';\nimport {execute} from './utils/queryParser';\nimport {StyledSlider, Thumb, Track} from './slider';\n\n\nconst typography = new Typography(funstonTheme)\ntypography.injectStyles()\ninjectFonts(typography)\n\nconst TEXT_COLLAPSE_OPTIONS = {\n  collapse: false, // default state when component rendered\n  collapseText: '... show query', // text to show when collapsed\n  expandText: '... hide query', // text to show when expanded\n  minHeight: 50, // component height when closed\n  maxHeight: 200, // expanded to\n  textStyle: { // pass the css for the collapseText and expandText here\n    color: \"white\",\n    fontSize: \"20px\"\n  }\n}\n\nfunction App() {\n  const [globeLabels, setGlobeLabels] = React.useState([]);\n  const [currentQuery, setCurrentQuery] = React.useState('Click button to see a query.');\n  const [booksCounter, setBooksCounter] = React.useState(1000);\n  const [billCounter, setBillCounter] = React.useState(1000);\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <Helmet>\n            <meta charSet=\"utf-8\" />\n            <title>Sparql Visualizer</title>\n        </Helmet>\n        <div style={styles.splitScreen}>\n          <div style={styles.leftPane}>\n        <ReactTextCollapse options={TEXT_COLLAPSE_OPTIONS}>\n          <p> {currentQuery} </p>\n        </ReactTextCollapse>\n            <button color='primary' onClick={() => execute(setGlobeLabels, setCurrentQuery, countriesQuery)} block>Show populations of the World</button>\n            <button color='primary' onClick={() => execute(setGlobeLabels, setCurrentQuery, antoineQuery)} block>Show birthplace of people with name Antoine</button>\n            <button color='primary' onClick={() => execute(setGlobeLabels, setCurrentQuery, airAccidentsQuery)} block>Show air accidents query</button>\n            <br></br>\n            <center>\n              Year of books less than:\n            <StyledSlider\n                min={0}\n                max={2021}\n                defaultValue={booksCounter}\n                renderTrack={Track}\n                renderThumb={Thumb}\n                onChange={val => setBooksCounter(val)}\n                />\n            </center>\n            <button color='primary' onClick={() => execute(setGlobeLabels, setCurrentQuery, booksQuery(booksCounter))} block>Show books query</button>\n            <br></br>\n            <center>\n              Year of Max Bill's works grater than:\n            <StyledSlider\n                min={1}\n                max={2021}\n                defaultValue={billCounter}\n                renderTrack={Track}\n                renderThumb={Thumb}\n                onChange={val => setBillCounter(val)}\n            />\n            </center>\n            <button color='primary' onClick={() => execute(setGlobeLabels, setCurrentQuery, maxBillQuery(billCounter))} block>Show max bill query</button>\n          </div>\n          <div style={styles.rightPane}>\n            <Globe\n              globeImageUrl=\"//unpkg.com/three-globe/example/img/earth-night.jpg\"\n              backgroundImageUrl=\"//unpkg.com/three-globe/example/img/night-sky.png\"\n              width={1000} height={1000}\n              labelsData={globeLabels}\n              labelLat={d => d.properties.latitude}\n              labelLng={d => d.properties.longitude}\n              labelText={d => d.properties.name}\n              labelSize={d => Math.sqrt(d.properties.pop_max) * 0.0001}\n              labelDotRadius={d => Math.sqrt(d.properties.pop_max) * 0.00005}\n              labelColor={() => 'rgba(255, 165, 0, 0.75)'}\n              labelResolution={2}\n              />\n          </div>\n        </div>\n      </header>\n    </div>\n  );\n}\n\nconst styles = {\n  splitScreen: {\n    display: 'flex',\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContnent: 'center'\n  },\n  leftPane: {\n      width: '50%',\n      display: 'flex',\n      flexDirection: 'column',\n  },\n  rightPane: {\n      width: '50%',\n  },\n};\n\nexport default App;\n","export const countriesQuery =\n    `\nSELECT DISTINCT ?countryLabel ?population ?cords\n{\n  ?country wdt:P31 wd:Q6256 ;\n           wdt:P1082 ?population ;\n           wdt:P625 ?cords.\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\" }\n}\nGROUP BY ?population ?countryLabel ?cords\nORDER BY DESC(?population)\n`;\n\nexport const antoineQuery =\n    `\nSELECT ?itemLabel ?cords ?placeName\nWHERE\n{\n  ?item wdt:P31 wd:Q5 .   # human\n  ?item wdt:P735 wd:Q15235674.\n  ?item wdt:P19 ?place.\n  ?place wdt:P1448 ?placeName.\n  ?place wdt:P625 ?cords.\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"fr\". }\n}\nLIMIT 250`;\n\nexport const airAccidentsQuery =\n    `\nSELECT ?label ?cords ?place\nWHERE\n{\n   ?subj wdt:P31 wd:Q744913  .\n   ?subj wdt:P625 ?cords .\n   ?subj rdfs:label ?label filter (lang(?label) = \"en\")\n}\nLIMIT 250`\n\n\nexport function booksQuery(year) {\n  return (\n    `\n    SELECT ?label ?cords\n    WHERE\n    {\n      VALUES ?type {wd:Q571 wd:Q7725634}  # book or literary work\n      ?item wdt:P31 ?type .\n      ?item wdt:P577 ?date FILTER (?date < \"`.concat(year).concat(`-01-01T00:00:00Z\"^^xsd:dateTime) .\n      ?item rdfs:label ?label filter (lang(?label) = \"en\")\n\n      OPTIONAL {\n        ?item (wdt:P291|wdt:P840) ?place .  # publication or narration place is ?place\n        ?place wdt:P625 ?cords\n      }\n    }\n    LIMIT 250`)\n  )\n}\n\n\nexport function maxBillQuery(year) {\n  return (\n    `\n    SELECT DISTINCT ?itemLabel ?countryLabel ?placeLabel (YEAR(?date) as ?year) ?cords\n    WHERE\n    {\n      ?item wdt:P31/wdt:P279* wd:Q860861 .\n      ?item wdt:P170 wd:Q123454 .\n      OPTIONAL { ?item wdt:P17 ?country . }\n      OPTIONAL { ?item wdt:P131 ?place . }\n      ?item wdt:P571 ?date FILTER (?date > \"`.concat(year).concat(`-01-01T00:00:00Z\"^^xsd:dateTime) .\n      OPTIONAL { ?item wdt:P625 ?cords . }\n      OPTIONAL { ?item wdt:P18 ?image . }\n      SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\" . }\n    }\n    ORDER BY ?itemLabel ?placeLabel\n    `)\n  )\n}\n\n\n\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}