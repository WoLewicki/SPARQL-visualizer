{"version":3,"sources":["utils/wikidata.js","App.js","reportWebVitals.js","index.js"],"names":["wdk","WBK","instance","sparqlEndpoint","executeQuery","query","a","sparqlQuery","split","url","body","axios","post","result","data","countriesQuery","setGlobeLabels","bindings","results","globeLabels","parseCountriesIntoObjects","arr","obj","longitude","cords","value","replace","latitude","push","properties","name","countryLabel","pop_max","population","styles","splitScreen","display","flexDirection","alignItems","justifyContnent","leftPane","width","rightPane","App","React","useState","className","style","color","onClick","execute","block","globeImageUrl","backgroundImageUrl","height","labelsData","labelLat","d","labelLng","labelText","labelSize","Math","sqrt","labelDotRadius","labelColor","labelResolution","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"wQAGMA,E,MAAMC,GAAI,CACZC,SAAU,2BACVC,eAAgB,sCASPC,EAAY,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,+DACJN,EAAIO,YAAYF,GAAOG,MAAM,KADzB,mBACjBC,EADiB,KACZC,EADY,cAEHC,IAAMC,KAAKH,EAAKC,GAFb,cAElBG,EAFkB,yBAGjBA,EAAOC,MAHU,2CAAH,sDCTnBC,EAAc,yS,4CAapB,WAAuBC,GAAvB,mBAAAV,EAAA,sEACqBF,EAAaW,GADlC,OACQD,EADR,OAEQG,EAAWH,EAAKI,QAAQD,SACxBE,EAAcC,EAA0BH,GAC9CD,EAAeG,GAJjB,4C,sBAOA,SAASC,EAA0BH,GACjC,IAD2C,EACrCI,EAAM,GAD+B,cAEzBJ,GAFyB,IAE3C,2BAA4B,CAAC,IAAlBK,EAAiB,QACpBC,EAAYD,EAAIE,MAAMC,MAAMC,QAAS,cAAe,IAAIlB,MAAM,KAAK,GACnEmB,EAAWL,EAAIE,MAAMC,MAAMC,QAAS,cAAe,IAAIlB,MAAM,KAAK,GACxEa,EAAIO,KAAK,CACPC,WAAY,CACVN,YACAI,WACAG,KAAMR,EAAIS,aAAaN,MACvBO,QAASV,EAAIW,WAAWR,UAVa,8BAc3C,OAAOJ,EAkCT,IAAMa,EAAS,CACbC,YAAa,CACXC,QAAS,OACTC,cAAe,MACfC,WAAY,SACZC,gBAAiB,UAEnBC,SAAU,CACNC,MAAO,OAEXC,UAAW,CACPD,MAAO,QAIEE,EA9Cf,WAAgB,IAAD,EACyBC,IAAMC,SAAS,IADxC,mBACN1B,EADM,KACOH,EADP,KAGb,OACE,qBAAK8B,UAAU,MAAf,SACE,wBAAQA,UAAU,aAAlB,SACE,sBAAKC,MAAOb,EAAOC,YAAnB,UACE,qBAAKY,MAAOb,EAAOM,SAAnB,SACE,wBAAQQ,MAAM,UAAUC,QAAS,kB,2CAAMC,CAAQlC,IAAiBmC,OAAK,EAArE,sBAEF,qBAAKJ,MAAOb,EAAOQ,UAAnB,SACE,cAAC,IAAD,CACEU,cAAc,sDACdC,mBAAmB,oDACnBZ,MAAO,IAAMa,OAAQ,IACrBC,WAAYpC,EACZqC,SAAU,SAAAC,GAAC,OAAIA,EAAE5B,WAAWF,UAC5B+B,SAAU,SAAAD,GAAC,OAAIA,EAAE5B,WAAWN,WAC5BoC,UAAW,SAAAF,GAAC,OAAIA,EAAE5B,WAAWC,MAC7B8B,UAAW,SAAAH,GAAC,OAAsC,KAAlCI,KAAKC,KAAKL,EAAE5B,WAAWG,UACvC+B,eAAgB,SAAAN,GAAC,OAAsC,KAAlCI,KAAKC,KAAKL,EAAE5B,WAAWG,UAC5CgC,WAAY,iBAAM,2BAClBC,gBAAiB,cCpDhBC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.32076d4a.chunk.js","sourcesContent":["import axios from 'axios';\nimport WBK from 'wikibase-sdk';\n\nconst wdk = WBK({\n    instance: 'https://www.wikidata.org',\n    sparqlEndpoint: 'https://query.wikidata.org/sparql',\n});\n\nexport const searchEntities = async (search, language) => {\n    const url = wdk.searchEntities({ search, language });\n    const result = await axios.get(url);\n    return result.data.search;\n};\n\nexport const executeQuery = async (query) => {\n    const [url, body] = wdk.sparqlQuery(query).split('?');\n    const result = await axios.post(url, body);\n    return result.data;\n};\n","import React from 'react';\nimport './App.css';\nimport Globe from 'react-globe.gl';\nimport {executeQuery} from './utils/wikidata';\n\nconst countriesQuery = \n`\nSELECT DISTINCT ?countryLabel ?population ?cords\n{\n  ?country wdt:P31 wd:Q6256 ;\n           wdt:P1082 ?population ;\n           wdt:P625 ?cords.\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\" }\n}\nGROUP BY ?population ?countryLabel ?cords\nORDER BY DESC(?population)\n`;\n\nasync function execute(setGlobeLabels) {\n  const data = await executeQuery(countriesQuery);\n  const bindings = data.results.bindings;\n  const globeLabels = parseCountriesIntoObjects(bindings);\n  setGlobeLabels(globeLabels);\n}\n\nfunction parseCountriesIntoObjects(bindings) {\n  const arr = [];\n  for (const obj of bindings) {\n    const longitude = obj.cords.value.replace( /[^\\d\\.\\ ]*/g, '').split(\" \")[0];\n    const latitude = obj.cords.value.replace( /[^\\d\\.\\ ]*/g, '').split(\" \")[1];\n    arr.push({\n      properties: {\n        longitude,\n        latitude,\n        name: obj.countryLabel.value,\n        pop_max: obj.population.value,\n      }\n    })\n  }\n  return arr;\n}\n\nfunction App() {\n  const [globeLabels, setGlobeLabels] = React.useState([]);\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <div style={styles.splitScreen}>\n          <div style={styles.leftPane}>\n            <button color='primary' onClick={() => execute(setGlobeLabels)} block>Search</button>\n          </div>\n          <div style={styles.rightPane}>\n            <Globe\n              globeImageUrl=\"//unpkg.com/three-globe/example/img/earth-night.jpg\"\n              backgroundImageUrl=\"//unpkg.com/three-globe/example/img/night-sky.png\"\n              width={1000} height={1000}\n              labelsData={globeLabels}\n              labelLat={d => d.properties.latitude}\n              labelLng={d => d.properties.longitude}\n              labelText={d => d.properties.name}\n              labelSize={d => Math.sqrt(d.properties.pop_max) * 0.00005}\n              labelDotRadius={d => Math.sqrt(d.properties.pop_max) * 0.00005}\n              labelColor={() => 'rgba(255, 165, 0, 0.75)'}\n              labelResolution={2}\n              />\n          </div>\n        </div>\n      </header>\n    </div>\n  );\n}\n\nconst styles = {\n  splitScreen: {\n    display: 'flex',\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContnent: 'center'\n  },\n  leftPane: {\n      width: '50%',\n  },\n  rightPane: {\n      width: '50%',\n  },\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}