{"version":3,"sources":["utils/wikidata.js","utils/queryParser.js","App.js","utils/queries.js","reportWebVitals.js","index.js"],"names":["wdk","WBK","instance","sparqlEndpoint","executeQuery","query","a","sparqlQuery","split","url","body","axios","post","result","data","execute","setGlobeLabels","bindings","results","globeLabels","parseCountriesIntoObjects","console","warn","arr","obj","longitude","cords","value","replace","latitude","push","properties","name","countryLabel","label","itemLabel","placeName","placeLabel","pop_max","population","styles","splitScreen","display","flexDirection","alignItems","justifyContnent","leftPane","width","rightPane","App","React","useState","className","style","color","onClick","block","globeImageUrl","backgroundImageUrl","height","labelsData","labelLat","d","labelLng","labelText","labelSize","Math","sqrt","labelDotRadius","labelColor","labelResolution","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c95cf0c1.chunk.js","sourcesContent":["import axios from 'axios';\nimport WBK from 'wikibase-sdk';\n\nconst wdk = WBK({\n    instance: 'https://www.wikidata.org',\n    sparqlEndpoint: 'https://query.wikidata.org/sparql',\n});\n\nexport const searchEntities = async (search, language) => {\n    const url = wdk.searchEntities({ search, language });\n    const result = await axios.get(url);\n    return result.data.search;\n};\n\nexport const executeQuery = async (query) => {\n    const [url, body] = wdk.sparqlQuery(query).split('?');\n    const result = await axios.post(url, body);\n    return result.data;\n};\n","import {executeQuery} from './wikidata';\n\nexport async function execute(setGlobeLabels, query) {\n  const data = await executeQuery(query);\n  const bindings = data.results.bindings;\n  const globeLabels = parseCountriesIntoObjects(bindings);\n  console.warn(globeLabels);\n  setGlobeLabels(globeLabels);\n}\n\nfunction parseCountriesIntoObjects(bindings) {\n  const arr = [];\n  for (const obj of bindings) {\n    const longitude = obj?.cords?.value?.replace( /[^\\d. -]*/g, '').split(\" \")[0];\n    const latitude = obj?.cords?.value?.replace( /[^\\d. -]*/g, '').split(\" \")[1];\n    arr.push({\n      properties: {\n        longitude,\n        latitude,\n        name: obj?.countryLabel?.value  || obj?.label?.value || `${obj?.itemLabel?.value} - ${obj?.placeName?.value || obj?.placeLabel?.value}`,\n        pop_max: obj?.population?.value || 100000,\n      }\n    })\n  }\n  return arr;\n}\n","import React from 'react';\nimport './App.css';\nimport Globe from 'react-globe.gl';\nimport {countriesQuery, antoineQuery, booksQuery, maxBillQuery, airAccidentsQuery} from './utils/queries';\nimport {execute} from './utils/queryParser';\n\nfunction App() {\n  const [globeLabels, setGlobeLabels] = React.useState([]);\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <div style={styles.splitScreen}>\n          <div style={styles.leftPane}>\n            <button color='primary' onClick={() => execute(setGlobeLabels, countriesQuery)} block>Show populations of the World</button>\n            <button color='primary' onClick={() => execute(setGlobeLabels, antoineQuery)} block>Show birthplace of people with name Antoine</button>\n            <button color='primary' onClick={() => execute(setGlobeLabels, booksQuery)} block>Show books query</button>\n            <button color='primary' onClick={() => execute(setGlobeLabels, maxBillQuery)} block>Show max bill query</button>\n            <button color='primary' onClick={() => execute(setGlobeLabels, airAccidentsQuery)} block>Show air accidents query</button>\n          </div>\n          <div style={styles.rightPane}>\n            <Globe\n              globeImageUrl=\"//unpkg.com/three-globe/example/img/earth-night.jpg\"\n              backgroundImageUrl=\"//unpkg.com/three-globe/example/img/night-sky.png\"\n              width={1000} height={1000}\n              labelsData={globeLabels}\n              labelLat={d => d.properties.latitude}\n              labelLng={d => d.properties.longitude}\n              labelText={d => d.properties.name}\n              labelSize={d => Math.sqrt(d.properties.pop_max) * 0.0001}\n              labelDotRadius={d => Math.sqrt(d.properties.pop_max) * 0.00005}\n              labelColor={() => 'rgba(255, 165, 0, 0.75)'}\n              labelResolution={2}\n              />\n          </div>\n        </div>\n      </header>\n    </div>\n  );\n}\n\nconst styles = {\n  splitScreen: {\n    display: 'flex',\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContnent: 'center'\n  },\n  leftPane: {\n      width: '50%',\n      display: 'flex',\n      flexDirection: 'column',\n  },\n  rightPane: {\n      width: '50%',\n  },\n};\n\nexport default App;\n","export const countriesQuery = \n`\nSELECT DISTINCT ?countryLabel ?population ?cords\n{\n  ?country wdt:P31 wd:Q6256 ;\n           wdt:P1082 ?population ;\n           wdt:P625 ?cords.\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\" }\n}\nGROUP BY ?population ?countryLabel ?cords\nORDER BY DESC(?population)\n`;\n\nexport const antoineQuery = \n`\nSELECT ?itemLabel ?cords ?placeName\nWHERE\n{\n  ?item wdt:P31 wd:Q5 .   # human\n  ?item wdt:P735 wd:Q15235674.\n  ?item wdt:P19 ?place.\n  ?place wdt:P1448 ?placeName.\n  ?place wdt:P625 ?cords.\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"fr\". }\n}\nLIMIT 250`;\n\nexport const booksQuery = \n`\nSELECT ?label ?cords\nWHERE\n{\n  VALUES ?type {wd:Q571 wd:Q7725634}  # book or literary work\n  ?item wdt:P31 ?type .\n  ?item wdt:P577 ?date FILTER (?date < \"1830-01-01T00:00:00Z\"^^xsd:dateTime) . # the date which user may manipulate \n  ?item rdfs:label ?label filter (lang(?label) = \"en\")\n\n  OPTIONAL {\n    ?item (wdt:P291|wdt:P840) ?place .  # publication or narration place is ?place\n    ?place wdt:P625 ?cords\n  }\n}\nLIMIT 250`;\n\n\nexport const maxBillQuery = \n`\nSELECT DISTINCT ?itemLabel ?countryLabel ?placeLabel (YEAR(?date) as ?year) ?cords\nWHERE\n{\n  ?item wdt:P31/wdt:P279* wd:Q860861 .\n  ?item wdt:P170 wd:Q123454 .\n  OPTIONAL { ?item wdt:P17 ?country . }\n  OPTIONAL { ?item wdt:P131 ?place . }\n  ?item wdt:P571 ?date FILTER (?date > \"1986-01-01T00:00:00Z\"^^xsd:dateTime) . # the date which user may manipulate \n  OPTIONAL { ?item wdt:P625 ?cords . }\n  OPTIONAL { ?item wdt:P18 ?image . }\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\" . }\n}\nORDER BY ?itemLabel ?placeLabel\n`\n\nexport const airAccidentsQuery =\n`\nSELECT ?label ?cords ?place\nWHERE\n{\n   ?subj wdt:P31 wd:Q744913  .\n   ?subj wdt:P625 ?cords .\n   ?subj rdfs:label ?label filter (lang(?label) = \"en\")\n}\nLIMIT=250`\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}